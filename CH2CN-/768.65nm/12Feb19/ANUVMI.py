#!/home/photodetachment/anaconda3/bin/python
"""
 ANUVMI.py 
 Stephen.Gibson@anu.edu.au   Aug 2012 -

 7/11/18 - Python3
 15-19/4/13 - now calculates PAD directly, no need to use fits images (and Beta.py)
 19/4/13 - pixel interpolation (using ndimage), uniform grids
           slight improvement over pxl (linear interp) + spectra look smoother 
"""
import numpy as np
import matplotlib.pyplot as plt

from collections import OrderedDict
import os, sys, time
import Cal, FWHM, polar, deblob, pgo
import inputoutput, ia
plt.ion()

scr = os.path.basename(sys.argv[0]).rstrip('.py')
path=os.getcwd()
try:
    dirs = path.split('/')
    wavelength = eval(dirs[-2][:-2])
    anion = dirs[-3]
except:
    print(f"{scr}: Warning: non 'Anion/Wavelength/Date/' directory structure")
    anion = "unknown"

if anion[-1] != '-':
    anion = input("{scr}: Enter anion: ")
    wavelength = eval(input(f"{scr}: Wavelength (nm): "))

NegativeIon = {
'O4-': {'EA':1.57*8065.541,'limits':{},
'VrR2E':{'13N3':(-2000, 1.2095),'13N3O':(-2000,1.2095),'13N12':(-1500,1.2095)}},
'Au-':  {'EA':18620.188608009998,'limits':{},'VrR2E':{'23J14':(-700,1.18)}},
'NOH2O-':{'EA':1.18*8065.541,'limits':{},'VrR2E':{'7N3':(-1500,1.2095)}},
'C3Hx-':{'EA':0.983*8065.541,'limits':{'X':(21979,22400)},'VrR2E':{'1N1':(-2800,1.2175)}},
'CH2CN-':{'EA':12468,
'limits':{
'h':(11900, 12200),
'a':(12180, 12730),
'b':(12730, 13100),
'y':(12785, 12850),
'x':(13100, 13140),
'z':(13625, 13685),
'c':(13582, 14027),
'd':(14224, 14709),
'e':(15023, 15469)
},
'VrR2E':{
'23A5':(-600,1.205), # 697.30nm
'23A4':(-600,1.205), # 
'23A3':(-600,1.205), # 
'23A2':(-600,1.205), # 
'23A1':(-600,1.205), # 
'18A1':(-400,1.205), # 696.20nm corrected, 697.14 idler, 696.4nm??
'12F3':(-200,1.205), # 767.7nm idler   ~768.85nm Vr=-200
'12F2':(-200,1.205), # 767.6nm idler   ~768.75nm Vr=-200
'12F1':(-200,1.205), # 767.5nm idler   ~768.65nm Vr=-200
'8F1':(-200,1.205), # 767.4nm idler   ~768.55nm Vr=-200
'7F2':(-200,1.205), # 767.3nm idler   ~768.45nm Vr=-200
'7F1':(-200,1.205), # 767.2nm idler   ~768.35nm Vr=-200
'6F1':(-200,1.205), # 767.1nm idler   ~768.25nm Vr=-200
'5F1':(-200,1.205), # 743nm idler   ~744.15nm Vr=-200
'4F1':(-200,1.227), # 780nm idler   ~781.15nm Vr=-200
'1F2':(-200,1.210), # 722.1nm idler   ~723.25nm Vr=-200
'1F1':(-200,1.210), # 725.42nm idler   ~726.57nm Vr=-200
'31J2':(-200,1.21), # 725.6nm idler   ~726.75nm Vr=-200   3Me
'31J1':(-200,1.210), # 725.4nm idler   ~726.55nm Vr=-200, barrier 600V 
'29J3':(-200,1.21), # 725.7nm idler   ~726.85nm Vr=-200, barrier 600V 
'29J12':(-200,1.210), # 725.3nm idler   ~726.45nm Vr=-200, barrier 600V 
'29J1':(-200,1.210), # 725.3nm idler   ~726.45nm Vr=-200, barrier 600V 
'24J3':(-200,1.210), # 725.5nm idler   ~726.65nm Vr=-200, barrier 600V 
'24J2':(-600,1.215), # 726.5nm idler   ~727.65nm 
'24J1':(-600,1.215), # 725.5nm idler   ~726.65nm 
'23J1':(-600,1.210), # 722.3nm idler   ~723.45nm 
'22J2':(-600,1.210), # 722.1nm idler   ~723.25nm  excessive bkg
'22J1':(-600,1.210), # 722.2nm idler   ~723.35nm 
'21J2':(-600,1.200), # 722.5nm idler   ~723.65nm 
'21J1':(-600,1.200), # 723.5nm idler   ~724.65nm 
'18J1':(-600,1.208), # 662.13nm signal    661.196(1)nm HF
'16J4':(-600,1.215), # 662.05nm signal
'16J3':(-600,1.208), # 662.15nm signal
'16J2':(-600,1.208), # 662.2nm signal
'16J1':(-600,1.215), # 662.1nm signal
'15J4':(-600,1.208), # 661.75nm signal
'15J3':(-600,1.208), # 662.5nm signal
'15J2':(-600,1.208), # 661.5nm signal
'15J1':(-600,1.208), # 661nm signal
'14J2':(-600,1.208), # 664nm signal
'14J1':(-600,1.208), # 662nm signal
'10J2':(-600,1.22), # 718nm
'10J1':(-600,1.22), # 720nm
'9J1':(-600,1.22), # 722nm
'6D3':(-600,1.225), # 725nm
'6D2':(-600,1.215), # 726nm
'6D1':(-600,1.186), # 727nm   R2E??
'5D3':(-600,1.22), # 724nm
'5D12':(-600,1.22), # 723nm
'5D2':(-600,1.22),
'5D1':(-600,1.22),
'4D1':(-400,1.215),
'29N4':(-400, 1.215),
'29N3':(-600,1.1986699),
'29N1':(-600,1.22),
'28N1':(-600,1.22),'26N1':(-800, 1.2), '6N3':(-1000, 1.21), '5N2':(-1000, 1.205),'1N3':(-2200,1.196), '30O1':(-2800,1.193)}},
#'CH2CN-': {'EA':12445.13,'limits':{},'VrR2E':{'25J1':(-2200,1.223)}},
'C3H3-':{'EA':0.983*8065.541,'limits':{},'VrR2E':{'30O22':(-2800,1.195)}},
'C2H7O2-':{'EA':12000,'limits':{},'VrR2E':{'25O1':(-2800,1.204),'17O1':(-1100,1.204)}},
'C4O-':{'EA':2.99*8065.541,'limits':{},
'VrR2E':{'24O1':(-1000,1.204),'22O2':(-2800,1.204)}},
'OCCO-':{'EA':1.942*8065.541,'limits':{},
'VrR2E':{'15N1':(-1000,1.2095),'14N1':(-1000,1.2095),'23O1':(-2800,1.204)}},
'C2H5O-':{'EA':13808.2,'limits':{},'VrR2E':{'23F1':(-1100,1.204)}},
'C2H3O-':{'EA':14719.6,  # Neumark 10.1063/1.3157208 JCP 130 244309 (2009)
'limits':{
'901':(14083, 14263),   # q
'000':(14500, 14800),   # A
'1111':(14844,14990),   # a
'910':(15080,15280),    # B
'910_1110':(15359, 15871), #b
'920':(15645, 15785),   # C
'710':(15785, 15899),   # D
'920_1111':(15899, 15973), # c
'710_1111':(15973, 16095), # d
'410':(16177, 16300), # E 410 and 930
'910_710':(16300, 16439), # F 
'920_710':(16807, 16913), # G
'A000':(22500,22795),  # H
'A910':(23080,23220),  # I
'A810':(23580,23735),  # J
'A610':(23830,24040),  # K
'A510':(24064,24172),  # L
'A410':(24175,24331),  # M
},
'VrR2E':{
'16M1':(-600, 1.1669), # 640nm
'15M1':(-600, 1.1716), # 637nm
'14M2':(-600, 1.18), # 671.3nm
'14M1':(-600, 1.18), # 635.4nm
'13M1':(-600, 1.18), # 648.5nm
'10M3':(-200, 1.18), # 675nm
'10M2':(-600, 1.18), # 637.2nm
'10M1':(-600, 1.18), # 631.5nm
'9M1':(-600, 1.18), # 612nm
'5A2':(-200, 1.07), #  680.46nm
'5A1':(-200, 1.07), #  680.54nm
'4A1':(-200, 1.07), #  678nm
'3A1':(-200, 1.07), #  680.38nm
'27M1':(-200, 1.18), #  660nm
'26M1':(-200, 1.18), #  659nm
'21M1':(-200, 1.18), #  658nm, 
'20M1':(-200, 1.1326), #  656nm, 
'19M1':(-200, 1.18), #  657nm, 
'18M1':(-600, 1.18), #  657nm, 
'15M1':(-600, 1.09085), #  667nm, x2048 => EA not 14720 cm-1
'14M1':(-600, 1.2), #  612nm, x1024, 1.203x512 
'13M2':(-600, 1.2), #  612nm, x1024, 1.203x512 
'13M1':(-600, 1.197), #  615nm, #1024, 1.191x1536
'12M1':(-600, 1.197), #  610nm, #1024, 1.191x1536
'8M1':(-600, 1.19354), #  609nm
#'7M2':(-600, 1.21137), # 611nm paired with O- to give x1.211 
'7M2':(-600, 1.18823), # assuming EA=14719.6 cm-1
'6M1':(-600, 1.14626), # OPO 650nm   1.165x512
'27N1':(-600,1.185), '6N12':(-1000, 1.203),'31O1':(-2800,1.191), '6O1':(-3100,1.2044), '5O1':(-2800,1.2044)}},
'H2O3-':{'EA':0.983*8065.541,'limits':{},'VrR2E':{'7N1':(-1000,1.2076)}},
'H3O2-':{'EA':26398.52,'limits':{},
'VrR2E':{'1N2':(-2000,1.2175), '11O2':(-1100,1.2),'11O1':(-1100,1.2)}},
'HCCO-':{'EA':18954.02,
'limits':{'a':(18500,19060),'b':(19210,19445),'c':(19860,20215),'d':(20444,20664),'e':(20760,21000),'f':(21300,21530),'g':(21994,22345)},
'VrR2E':{'8O3':(-2200,1.195), '5O2':(-2800,1.2044)}},
'C2-' : {'EA':26396, 
'limits':{
'X0':(26100, 26590),
'a0':(26750, 27145),
'X1':(28000,28310),
'a1':(28310, 28790)},
'VrR2E':{
'5A6Cn1024':(-2800,1.206), # 290 nm
'5A6Cn512':(-2800,1.206), # 290 nm
'5A5CbI512':(-2800,1.205), # 325 nm
'5A4Cn512':(-2800,1.205), # 315 nm
'5A3Cn512':(-2800,1.206), # 305 nm
'5A2Cn512':(-2800,1.205), # 300 nm
'7N1':(-300,1.17), 
'17M1':(-800,1.16)}},  # 1.142x 2048
'C2H-': {'EA':23946.59,
'limits':{
'222':(23695,23729),
'211':(23761,23850),
'00':(23879,24008),
'21':(24250,24357),
'22':(24671,24777),
'23':(25095,25313),
'24':(25486,25567),
'31':(25721,25833),
'2131':(25952,26146),
'x':(26440,26490),
'y':(26775,26925),
'z':(26988,27065),
'A0':(27504,27558),
'A1':(27608,27644),
'A2':(27707,27744),
'A3x':(28653,29740),
'A3':(27938,27970),
'A4':(28034,28074),
'B1':(28244,28574),
'B2':(28729,28930),
'B3':(29040,29205),
'B4':(29250,29388),
'B5':(29461,29598),
'C1':(29965,30146)
},
'VrR2E':{
'6S1':(-1000, 1.2008),  # 320nm
'23J12':(-1200, 1.2008), # 300 nm
'17J2':(-1200, 1.2008), # 300 nm
'17J1':(-1200, 1.197), # 300 nm
'12J2':(-1000, 1.1798), # 1024x, 1.1846 512x, 1.1772 2048x
'25M16':(-2000,1.1798), # 1024x, 1.1846 512x, 1.1772 2048x
'25M6':(-2000,1.182),
'25M5':(-2000,1.182),
'25M4':(-2000,1.182),
'25M3':(-2000,1.182),
'25M2':(-2000,1.182),
'25M1':(-2000,1.182),
'17M2':(-2000,1.188),
'12D1':(-600,1.208),  # x512,  1.202 x1024
'18N1':(-600, 1.195), '16M1':(-800, 1.17),'31J1':(-2700,1.16)}},
# '17M2':(-2000,1.195)
'C2D-': {'EA':23955,
'limits':{
'211':(23784, 23876),
'000':(23877, 24016),
'210':(24184, 24279),
'220':(24537, 24607),
'230':(24885, 24932),
'310':(25663, 25741),
'2x':(25343, 25384),
'3m':(25465, 25535),
'310':(25455, 25732),
'210310':(25860, 25940),
'220310':(26202, 26277),
'230310':(26526, 26607),
'110':(26486, 26596),
'1x':(26706, 26764),
'A1':(27222, 27286),
'A2':(27344, 27390),
'A3':(27419, 27477),
'A4':(27506, 27582),
'A5':(27744, 27860)},
'VrR2E':{'22M1':(-800, 1.1814)}},  # 1.187 512x, 1.1814 1048x
'D2CC-': {'EA':3952.115,'limits':{'000':(3635,4100)},'VrR2E':{'23M1':(-2800, 1.175)}},
'H2CC-':{'EA':3952.115,
'limits':{
'000':(3630,4070),
'610':(4105,4277),
'620':(4277,4571),
'640':(4571,4841),
'310':(4951,5282),
'210':(5429,5785),
'320':(6052,6483),
'210310':(6588,6837),
'510':(6837,7017),
'x':(7017,7187),
'330':(7390,7706),
'510310':(7977,8338),
'y':(8579,8735)
},
'VrR2E':{'6B1':(-800,1.187),'6A1':(-800,1.187),'5A1':(-800,1.19),'23M2':(-2900,1.172),'21M2':(-2800,1.19), '21M1':(-2800,1.45), '2F1':(-2800,1.1785),'31J1':(-2700,1.19),'18N9':(-800,1.2),'18N1':(-800,1.2),'16N12':(-800,1.195),'16N8':(-800,1.195),'16N1':(-800,1.2),'15N1':(-800,1.2),'28O1':(-1100,1.19),'27O6':(-1100,1.19),'27O5':(-1100,1.19),'27O3':(-1100,1.19),'27O2':(-1100,1.19),'27O1':(-1100,1.19),'21O1':(-2200,1.16),'13O2':(-2200,1.17),'20J2':(-2200,1.171),'27A23':(-700,1.211),'27A1':(-650,1.2185),'26A1':(-1100,1.208),'25A1':(-2200,1.19),'25A1T':(-2200,1.19),'19J2':(-2200,1.165),'19J1':(-2200,1.163),'18J12':(-2200,1.168),'17J1':(-2200,1.17),'5J2':(-2200,1.2045),'5J1':(-2200,1.2045),'4J12':(-2200,1.2045),'3J2':(-2200,1.2045),'3J1':(-2200,1.205),'2J2':(-2200,1.205),'24S5':(-2200,1.194699)}},
'NO-': {'EA':240,  # 183,
'limits':{
'v0':(-50,750),
'v1':(1900,2400),
'v2':(3800,4400),
'n2':(4030,4400),
'v3':(5700,6000),
'v4':(7400,7800),
#'v5':(7600,8700)
},
'VrR2E':{
'25F1':(-1400, 1.23),  # 1550nm OPO
'22F1':(-2000, 1.207),  # 1500nm OPO
'20F1':(-2000, 1.207),  # 730nm ~731.15nm
'19F1':(-2000, 1.207),  # 830nm ~831.15nm
'18F1':(-2000, 1.21),  # 755nm ~756.15nm
'15F3':(-2000, 1.21),  # 745nm ~746.15nm
'15F2':(-2000, 1.19),  # 735nm ~736.15nm
'15A1':(-2200, 1.171),'10M1':(-2200,1.16),'9M1':(-2200,1.16),'8M3':(-2200,1.16),'7M1':(-2200,1.16),'3M2':(-2200,1.16),'28J1':(-2200,1.2),'23J1':(-2200,1.22),'22A1':(-2200,1.22),'14A23':(-2200,1.20175198),'13A2':(-2200,1.21), '8A2':(-2200,1.2305),'7A12':(-2200,1.2305),'25M12':(-2200,1.21605),'12M13':(-2200,1.21605),'25J1':(-2200,1.221)}},
'NO2-':{'EA':18332.974693,
'limits':{
'100200':(18245,18600),
'100210':(19020,19276),
'110200':(19560,19740),
'100220':(19740,20100),
'110210':(20310,20500),
'100230':(20500,20800),
'110220':(21050,21240),
'100240':(21240,21550),
'120210':(21500,21760),
'110230':(21760,21975),
'100250':(21975,22152),
'120230':(22348,22495),
'110240':(22520,22708),
'100260':(22740,22822),
'120230':(23080,23240),
'110250':(23250,23460),
'120240':(23805,24003),
'110260':(24005,24188),
'120250':(24533,24755),
'120260':(25273,25470),
'A0':(27758, 28100),
'A1':(28505, 28897),
'A2':(29301, 29681),
'A3':(30085, 30367),
'A4':(30880, 31140)
},
'VrR2E':{
'5S1':(-1800,1.204), #320nm 
'30A1Cn512':(-2000,1.185), # 290nm
'2A1':(-2900,1.185),
'11J1':(-2900,1.185),'30J1':(-1500,1.185),'25J1':(-1500,1.18),'24J2':(-2200,1.14),'27M4':(-2200,1.19),'27M3':(-2200, 1.19),'26M3':(-2200,1.19),'26M1':(-2200,1.205),'001M1':(-500,1.245121628),'28A23':(-2200,1.196),'28A1':(-2200,1.196),'22A2':(-2200,1.196),'14A23':(-2200,1.20175198),'8A1':(-2200,1.196),'26M4':(-2200,1.196),'25M12':(-2200,1.196),'18M2':(-1100,1.196),'12M13':(-2200,1.19612377),'11M1':(-1100,1.196),'10M3':(-1100,1.196)}},
'HOO-': {'EA':1.089*8065.541,
'limits':{'X0':(8400,9080),'X1':(9390,10300),'X2':(10500,11470),
'X3':(11660,12360),'X4':(12680,13430),'X5':(13720,14470),'X6':(14800,15470),
'A0':(15480,16130),'A1':(16350,17150),'A2':(17295,18040),'A3':(18200,18700)},
'VrR2E':{'15N2':(-2000,1.2095),'28J1':(-2200,1.279)}},
'O-':   {'EA':11784.676,'P1':158.265,'P0':226.977,'D2':15867.862,'FS':177.13,
         'limits':{
'1D2':(27400,27800),
'1D212':(27400,27570),
'1D232':(27570,27800),
'3PJ':(11500,12300),
'3P212':(11500,11686),
'3P232':(11687,11873),
'3P132':(11874,12020),
'3PJa':(11774,11980),
'3PJb':(11980,12160)},
         'VrR2E':{\
'7M1':(-600, 1.21137), # using 610nm as wavelength, 1024x # 1.2047912) 1536x # 611 nm, measured with C2H3O-
'29N2':(-600,1.1986699),   # measured with CH2CN-
'5N1':(-1000, 1.2076),
'8O2':(-2200, 1.1994), # was b4 morph 1.2028),
'4O1':(-2200, 1.2044),
'28S1':(-2200, 1.21046864),
'3A2':(-2900, 1.1785889),
'3A1':(-2700, 1.195),
'30N1':(-2000, 1.178),
'15M1':(-2000, 1.178), #1.19113957),  # best!
'14F1':(-2800, 1.155),
'9F23':(-2800, 1.157),
'24J1':(-2200, 1.1721),
'23F2':(-2200, 1.17483725),
'22F1':(-2200, 1.16384472),
'3F2':(-1100,1.19946658),
'1F3':(-1100,1.19501996),
'27J3':(-2200,1.18387880),
'27J2':(-2200,1.18387880),
'27J1':(-2200,1.18652011),
'3J1':(-1100,1.18922352),
'28A23':(-2200,1.18749),
'14A23':(-2200,1.20175198),
'12M13':(-2200,1.19612377),
'12M13':(-1000,1.1957734),
'10M12':(-1100,1.196),
'6M1':(-1100,1.198),
'5M4':(-1100,1.19245191),
'5M3':(-2200,1.19245191),
'7O3':(-2200,1.19251893),
'26N1':(-2200,100.0/86.519),
'26N1P':(-2200,1.16617737),
'22N1':(-2200,1.171873),
'22N1Q':(-2200,1.171835),
'5M3':(-2200,1.19245191),
'7O3':(-2200,1.19251893),
'26N1':(-2200,100.0/86.519),
'26N1P':(-2200,1.16617737),
'22N1':(-2200,1.2), #1.171873),
'22N1Q':(-2200,1.171835),
'22N1P':(-2200,1.171835),
'22N1D':(-2200,1.1661),
'13S45':(-2200,1.17530644),
#'13S23':(-2200,1.17647702),
'13S23':(-2200,1.17647702),
'8S3':(-2200,100.0/86.255),
#'8S2':(-2000,1.1273723),
'8S1':(-2000,1.17843504),
'8S1P':(-2000,1.17843504),
'27S1':(-2200,100.0/86.06),
'27S2':(-2200,1.16185087),
'27S34':(-2200,1.16056638),
'27S5P':(-2200,1.16160046),
'29N1':(-2200,1.16758026),
'29N1E':(-2200,1.16758026),
'29N1P':(-2200,100.0/86.05),
'28M23':(-1400,1.154629),
'30J13':(-50,1.105),
'7M13xy':(-1000,1.2017),
'8M12xy':(-1000,1.20531460),
'14N2':(-98,1.12888217),
'10N2':(-98,1.148427),
'4J13':(-1000,1.18744628),
'24S23':(-1000,1.2078855),
'24S4':(-2200,1.194699),
        }
        },
'OH-':  {'EA':14740.982,
         'limits':{\
'O35':(14365,14420),
'O34':(14442,14490),
'P3':(14500,14649),
'P14':(14647,14667),
'P32':(14618,14641),
'P33':(14590,14615),
'P34':(14560,14582),
'P35':(14530,14549),
'Q3' :(14678,14732),
'Q31P13':(14687,14710),
'Q32':(14710,14717),
'R3' :(14730,14850),
'R30':(14734,14753),
'P12':(14751,14766),
'R31':(14781,14797),
'Q13':(14798,14811),
'R32Q11':(14822,14844),
'R1' : (14850,14896),
'R10R33':(14857,14882),
'R11':(14870,14920),
'R12':(14900,14940),
'R13R35':(14938,14958),
'R14':(14967,14983),
'S1': (14896,15160),
'S11':(14985,15010),
'S12':(15043,15090),
'S13':(15108,15160)},
         'VrR2E':{'20M2':(-2000,1.17),'20M1':(-2000,1.17),'1A2':(-2200,1.22),'30A13':(-60,1.842),'2M28':(-1000,1.842),'3M212':(-1000,1.841),'4M212':(-1000,1.84),'5M28':(-1000,1.8428),'8M213':(-1000,1.8392),'10M212':(-1000,1.8421),'11M312':(-1000,1.84512),'30M38':(-1000,1.8338),'31M117':(-1000,1.8358),'1J12':(-1000,1.1877),'2J12':(-646.15,1.84),'26M12':(-750,1.91),'25M12':(-550,100.0/83.515),'21M12':(-500,100.0/83.495),'18M12':(-400,100.0/83.19),'10M12':(-350,100.0/82.79),'11M12':(-200,100.0/81.589),'14M12':(-120,100.0/78.18),'13M12':(-100,100.0/77.0)}
        },
'O2-':  {'EA':3613,
'limits':{\
'X0':(3000,4425),
'X1':(4470,6006),
'X2':(6030,7400),
'X3':(7600,9095),
'X4':(9100,10300),
'X5a0':(10350,12250),
'X6a1':(12350,13600),
'a2':(13700,15200),
'a3':(15300,16500),
'b0':(16362,16945),
'a4':(16970,17696),
'b1':(17668,18418),
'a5':(18418,19115),
'b2':(19140,19810),
'b3':(20392,21225),
'b4':(21698,22504)
},
'VrR2E':{
'26F1':(-1400,1.225), # 1550nm OPO
'19F2':(-2000,1.207), # 830nm OPO ~831.15nm
'15F1':(-2000,1.189), # 735nm OPO ~736.15nm
'2J13':(-1740,1.19), # 2008 679.53nm
'2M1':(-1000,1.195),'4A1':(-1100,1.19),'14M1':(-2800,1.18),'14F2':(-2800,1.18),'3F1':(-2800,1.18),'26O1':(-1100,1.195),'20O1':(-2200,1.17),'13O1':(-2200,1.17),'12O1':(-2200,1.17),'11O1':(-2200,1.17),'21S2':(-2200,1.17),'21S1':(-2200,1.17),'20S3':(-2200,1.17),'24J13':(-1400,1.2),'20J1':(-2200,1.175),'18J1':(-2200,1.175),'19M1':(-2700, 1.175),'13M1':(-2700,1.175),'20A1':(-2700,1.175),'15A2':(-2200,1.16),'17M2':(-2200,1.16),'17M1':(-2200,1.16),'10M2':(-2200,1.16),'9M2':(-2200,1.16),'3M1':(-2200,1.16),'21A1':(-2200,1.19),'15S23':(-750,1.208),'15S2':(-750,1.21),'15S1':(-700,1.217),'26J13':(-1300,1.2012),'8A2':(-2200,1.21605),'23M4':(-2200,1.21605),'9O2':(-2200,1.205),'27M13':(-2200,1.2090),'22M13':(-2000,1.157),'11J1':(-2200,1.2090),'17J34':(-2200,1.195),'17J34CE':(-2200,1.195)}},
'O3-':  {\
'EA':16961.83272, # Arnold ... Neumark JCP 101, 912 (1994)
'limits':{
'O3P':(11480,12100), 'O1D212':(27400,27570), 'O1D232':(27570,27800),
'000':(16765,17045),'100210':(17532,17711),'110200':(17930,18121),
'110210':(18646,18787),'120200':(19030,19248),'120210':(19721,19888),
'130200':(20067,20324),'130210':(20733,20976),'140200':(21194,21412),
'3B2b':(26240,26608),'3B2c':(26854,27110),'3B2d':(27493,27615)},
'VrR2E':{'8N1':(-1000,1.22),
'9O2':(-2200, 1.2048),'5O3':(-2800,1.204),'3F1':(-1100,1.195),'2F1':(-1100,1.195),'1F124':(-1100,1.19501996),'3J2':(-1100,1.2),'10M12':(-1100,1.2)}
},
'S2-':  {'EA':13469,
         'limits':{'3P':(0,1)},
         'VrR2E' :{'21A12':(-1200,1.17)}
},
'CS2-': {'EA':4436,
         'limits':{'v3':(5600,6050),'v4':(6050,6500),'v5':(6500,6750),'v6':(6800,7200),'v7':(7200,7600),'v8':(7600,7990),'v9':(8000,8400),'v10':(8500,8800),'v11':(8900,9200),'v12':(9300,9650),'v13':(9700,10100),'v14':(10100,10500),'v15':(10600,10900),'v16':(11000,11500),'v17':(11520,11800),'v18':(11900,12150)},
         'VrR2E':{'4M1Q':(-1000,1.1805),'4M1':(-1000,1.1805)}},
'S2O-': {'EA':15139,
         'limits':{'xx':(0,1)},
         'VrR2E':{'4A1':(-1850,1.17758)}
},
'SO2-': {'EA':8928.55,  #12203.1635,
         'limits':{'xx':(0,1)},
         'VrR2E':{'6O12':(-1850,1.17758)}},
'Cl-':  {'EA':3.612724*8065.541,
         'limits':{\
'P32':(29050,29200),
'P12':(29950,30060)},
'VrR2E':{
'2A2':(-400,1.152),
'2A3':(-400,1.175),
'2A4':(-400,1.1753928090497487),
'11A3':(-1000,1.185),
'11A2':(-1000,1.18148),
'22J1':(-1000,1.173),
'22J2':(-1000,1.176),
'22J3':(-1000,1.176),
'3A8':(-300,1.176)}
        },
'S-':   {'EA':16752.9753,'P1':396.055,'P0':573.64,'D2':9238.609,'FS':483.52,
         'limits':{\
'3P212':(16500,16686),
'3P232':(16687,16873),
'3P132':(16874,17020)},
        'VrR2E':{'18S12':(-200,1.1825),'14A12':(-1000,1.176),'13A12':(-1000,1.177),'9A12':(-1000,1.176)}}
}

NegativeIon['C2H2-'] = NegativeIon['H2CC-']

if anion not in list(NegativeIon.keys()):
   EA = input(f"{scr}: Enter EA (cm-1) [8064]: ")
   if len(EA) > 1:
       EA = eval(EA)
   else:
       EA = 8065
   NegativeIon[anion] = {'EA':EA,'limits':{},'VrR2E':{}}

quad = [(0, 90), (-90, 0), (-180, -90), (90, 180)]  # (Am, Ax)

par = OrderedDict([
('Rm', 0), ('Rx', 900), ('dR', 0.1), ('Am', 0), ('Ax', 90), ('dA', 0.1),
('BEm', 14492), ('BEx', 14647), ('Vr', -2200), ('R2E', 1.205), ('PXLI', False),
('Q', 0), ('norm', True), ('bin', 0.5), ('fn', ''), ('wavelength', wavelength),
('anion', anion), ('scr', scr), ('drop', 0), ('bkg', False)])

# sort limits
NegativeIon[anion]['limits'] = OrderedDict(sorted(list(
 NegativeIon[anion]['limits'].items()), key=lambda x: x[1]))

EA = NegativeIon[anion]['EA']
print(f'{scr}: {anion} EA({anion[:-1]}) = {EA} cm-1'\
      f'  wavelength = {wavelength} nm')
par['BEm'] = int(EA*10)/10 - 100
par['BEx'] = int(1.0e8/wavelength)/10

def display(im):
    global fn
    rows, cols = im.shape
    r2 = rows//2
    c2 = cols//2
    indx = np.arange(cols) - c2

    fig, (ax0, ax1) = plt.subplots(1, 2, sharex=True, figsize=(20,8))
    vmax = im[r2, c2:].max()
    ax0.imshow(im, vmin=0, vmax=vmax, extent=[-c2, c2, -r2, r2])
    ax0.axis(xmin=-c2, xmax=c2, ymin=-r2, ymax=r2)
    ax0.set_xlabel("radius (pixels)")
    ax0.set_ylabel("radius (pixels)")

    hslice = im[r2-10:r2+10].sum(axis=0)
    ax1.plot(indx, hslice, 'b')
    if fn.find('I') < 0:
        vslice = im[:,c2-10:c2+10].sum(axis=1)
        ax1.plot(indx, vslice, 'r')
    ax1.set_xlabel("radius (pixels)")
    ax1.axis(xmin=-c2, xmax=c2, ymin=0, ymax=hslice.max())
    plt.draw()

commands = [
'Abel','AbelQ', 'cal', 'centre', 'clear', 'deblob', 'display', 'FITS', 'FWHM',
'PAD', 'param', 'peaks', 'PES', 'PES2', 'pgo', 'polar', 'read', 'q', 'quit', 'save',
'show', 'trunc']
print(commands)

argc = len(sys.argv)
if argc < 2:
    filename = input(scr+": Enter image filename: ")
    maxevents = -1
else:
    filename = sys.argv[1]
    if argc > 3:
        maxevents = int(sys.argv[3])
    else:
        maxevents = -1

if filename.find('PES') > 1:
    R, I = np.loadtxt(filename, unpack=True)
    label = "PESBE"
    fn = filename.split('.')[0]
    #anion = fn.split('-')[0]+'-'
    i = fn.find('I')
    j = fn.find('PESBE')
    n = int(fn[i+1:j])
    print(f"{scr}: PES file x{n}")
    #peaks = FWHM.FWHM (R,I,NegativeIon[anion],par) 
else: 
    # read image
    im, fn, n = inputoutput.readVMI(filename, maxevents=maxevents)
    label = "read"
par['fn'] = fn
bin = n/2048.0
peaks = None
#anion = fn.split('-')[0]+'-'
fnx = par['fn'][1:]
tag = "CM" if fnx.find("CM") > 0 else "EM"
scandate = fnx.split(tag)[0].split('-')[1]
if tag[0] == 'O': scandate += 'E'
R2Efn = f'R2E{int(bin*2048+0.5)}'
if os.path.isfile(R2Efn):
    R2E = np.loadtxt(R2Efn)
    Vr = np.loadtxt('Vr')
    par['R2E'] = R2E
    par['Vr'] = Vr
    print(f'{scr}: R2E = {R2E:8.5f}, Vrepeller = {Vr:g} volts')
else:
    if scandate in NegativeIon[anion]['VrR2E']:
        par['Vr'], par['R2E']  = NegativeIon[anion]['VrR2E'][scandate]
        print(f"{scr}: Vr={par['Vr']:g}, R2E={par['R2E']:8.5f}")
    else:
        print(f"{scr}: \033[31mUse 'param' to set Vr, R2E for data"\
              f" '{par['fn']}'\033[0m")

while True:
    comm = input(f"{scr}: Command? ")
    if comm not in commands: continue
    if comm in ('Abel', 'inverse'): im = ia.IA(im); fn += 'I'
    if comm == 'AbelQ': im = ia.IAQ(im); fn += 'I'
    if comm == 'cal': 
        R, I, par = Cal.Cal(im, NegativeIon[anion], par)
        label = 'PES'
    if comm == 'centre' : 
        imC, dxc, dyc = polar.centre(im, par)
        if filename[-4:] == '.bin':
            cent = input(f"{scr}: re-bin binary image: centre offset"\
                         f" ({dxc:g},{dyc:g}): ")
            if cent != '' : dxc, dyc = cent.split() 
            dxc = float(dxc); dyc = float(dyc)
            if abs(dxc) < 0.1 and abs(dyc) < 0.1: continue
            im, fn, n = inputoutput.readVMI(filename, maxevents=maxevents,
                                            dxc=dxc, dyc=dyc)
            par['fn'] = fn
            par['bin'] = bin = n/2048.0
        im = imC
        label = 'C'
        fn = fn[:-4] + label + fn[-4:]
    if comm == 'clear' : plt.clf()
    if comm == 'deblob' : 
        deblob.deblob(im)
        fn += 'b'
    if comm == 'display': display(im)
    if comm == 'FITS': inputoutput.writeImage(im, fn, format='fits')
    if comm in ('FWHM', 'peaks', 'pgo'):
        try: label
        except:
            print(f"{scr}: \033[31mError: generate PES first\033[0m")
            continue
        else:
            if label != 'PESBE':
                print(f"{scr}: \033[31mError: generate PES first\033[0m")
                continue
        if comm == 'pgo':
            pgo.pgo(R, I, NegativeIon[anion], anion, par, plot=True)    
            print('ANUVMI: recalculate calibrated PES')
            comm = 'PES'
        else:
            peaks = FWHM.FWHM(R, I, NegativeIon[anion], par) 
    if comm == 'PAD':
        polar.PAD(im, NegativeIon[anion], par)
    if comm == 'param':
        opt = input(f"  \033[34mSpecify any [BEm={par['BEm']:g},"\
                    f"BEx={par['BEx']:g},Rm={par['Rm']:g},Rx={par['Rx']:g},"\
                    f"dR={par['dR']:g},Am={par['Am']:g},Ax={par['Ax']:g},"\
                    f"dA={par['dA']:g},Vr={par['Vr']:g},R2E={par['R2E']:g},"\
                    f"PXLI={par['PXLI']},Q={par['Q']},norm={par['norm']}"\
                    f"]: \033[0m")

        for kv in opt.split(','):
            if kv: exec("par['%s']=%s" % tuple(kv.split('=')))

        if par['Q'] in range(4) and\
           'Am' not in opt and 'Ax' not in opt:
            par['Am'], par['Ax'] = quad[par['Q']]

    if comm in ('polar','PES','PES2'): 
        if comm == 'PES' and fn.find('I') == -1: 
            print(f"{scr}: \033[31mError raw VMI image? Invert first (Abel)\033[0m") 
            continue
        if comm in ['PES', 'polar']:
            R, I = polar.PES(im, NegativeIon[anion], par)
        else:
            R, I = polar.PES2(im, NegativeIon[anion], par)
        plt.figure (1)
        label = "polar"
        if comm == 'polar': 
            plt.xlabel("pixel")
            plt.ylabel("Intensity")
            plt.plot(R, I, lw=1)
            plt.draw()

    if comm == 'PES':
        if 'I' in fn: 
            label='PESBE'
            R, I = polar.R2toBE(R, I, par)
            fig = plt.gcf()
            fig.canvas.set_window_title('PES')
            plt.title(f"{wavelength:g} nm   {fn:s}")
            if (int(par['Am']), int(par['Ax'])) not in quad:
                 lbl = f"Am{par['Am']}Ax{par['Ax']}"
            else:
                 lbl = 'Q'+str(par['Q'])

            plt.plot(R, I, lw=1, label=lbl)
            plt.legend(fontsize=9, labelspacing=0.1)
            plt.xlabel(r"BE (cm$^{-1}$)"); 
            plt.ylabel("Intensity")
            plt.draw()
            plt.savefig(f"{fn+label:s}.pdf")
            print(f"{scr}: PES: Figure saved to '{fn+label:s}.pdf'")
            comm = 'save'
        else: 
            print(f"{scr}: \033[31mError raw VMI image? Invert first (Abel)\033[0m")
    if comm == 'read': 
        im, fn, n = inputoutput.readVMI(); bin=n/2048.0; del R; display(im)
    if comm == 'save': 
        try: R
        except NameError: 
            inputoutput.writeImage(im, fn, format='txt')
        else:
            fname = fn
            if (int(par['Am']), int(par['Ax'])) not in quad:
                fname += f"Am{par['Am']}Ax{par['Ax']}"
            elif 'Q' in fname:
                fname += 'Q'+str(par['Q'])
            fname += label+'.dat' 
            np.savetxt(fname, np.transpose((R,I)))
            print(f"{scr}: PES written to '{fname}'") 
    if comm == 'show' : show()
    if comm == 'trunc':
        events = im.sum()
        maxevents = int(input(f'{scr}: {int(events):,} events, truncate to: '))
        label = f't{maxevents}'
        im, fn, n = inputoutput.readVMI(filename, maxevents)
    if comm in ('q','quit'): exit() 
